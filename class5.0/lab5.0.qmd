---
title: "lab5.0"
format: pdf
editor: visual
author: Ilyas Darif A16577084
date: 1/21/25


---

## Intro to ggplot

there are many graphics systems in R (ways to make plots and figures). These include "base" R plots. today we will focus mostly on **ggplot2** package.

lets start with a plot of a simple in-built dataset called `cars`.

```{r}
cars

```


```{r}
plot(cars)

```

lest see how we can make this figure using **ggplot** install first by using `install.packages`


> i will wun install.packages(ggplot2) in the R console not in the doc

before i can use a func froim a package i need to load the package from "library()" by doing `library(ggplot2)` to call it


```{r}
library(ggplot2)
ggplot(cars)
```

all ggplot figures have at least 3 things (called layers) these include: 

- **data** (the input data set i want plot)
- **aes** (the aesthetic mapping of the data to my plot)
- **geoms** ( the geom_point(), geom_line)

```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point()
```


lets add a line to tshow the relation
```{r}
ggplot(cars) + 
  aes(x=speed, y=dist) +
  geom_point() + 
  geom_smooth(method="lm") +
  theme_bw() +
  labs(title = "My first GGPLOT")


  ## used to make the line



```


the code to read a dataset

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> How many genes are in this dataset

```{r}
nrow(genes)
ncol(genes)

```

A first plot of this dataset
```{r}
ggplot(genes) +
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point() +
    theme_bw() +
    labs(title = "Gene Expression changes upon drug treatment", 
         x="Control Expression",
         y="Drug Pressence Expression")
    scale_colour_manual( values=c("blue","gray","red") )
  
  
  
```

```{r}
p <- ggplot(genes) +
    aes(x=Condition1, y=Condition2, col=State) +
    geom_point()

p
```


```{r}
p + labs(title = "Hello")
```



```{r}
p + theme_minimal()
```




```{r}
table(genes$State)
```
##GapMinder

```{r}
library(gapminder)
library(dplyr)
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)

gapminder_2007 <- gapminder %>% filter(year==2007)
gapminder_1957 <- gapminder %>% filter(year==1957)

ggplot(gapminder_2007) +
  aes(x=gdpPercap, y= lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.5)

  ggplot(gapminder_2007) +
    aes(x=gdpPercap, y= lifeExp, color=pop) +
    geom_point(alpha=0.8)

    ggplot(gapminder_2007) +
     aes(x=gdpPercap, y= lifeExp, size=pop) +
     geom_point(alpha=0.5)

      ggplot(gapminder_2007) + 
        geom_point(aes(x = gdpPercap, y = lifeExp,
                         size = pop), alpha=0.5) + 
        scale_size_area(max_size = 10)

        ggplot(gapminder_1957) + 
          aes(x = gdpPercap, y = lifeExp, color=continent,
                         size = pop) +
          geom_point(alpha=0.7) + 
          scale_size_area(max_size = 10) 


gapminder_1957 <- gapminder %>% filter(year==1957 | year==2007)

  ggplot(gapminder_1957) + 
    geom_point(aes(x = gdpPercap, y = lifeExp, color=continent,
                   size = pop), alpha=0.7) + 
    scale_size_area(max_size = 10) +
    facet_wrap(~year)
```








> Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset?

```{r}
round(table(genes$State)/nrow(genes), 4)

```



You can add options to executable code like this

```{r}
plot(1:10)
```

```{r}
n.tot <-nrow(genes)
vals <- table(genes$State)

vals.percent <- vals/n.tot * 100
round(vals.percent, 2)

```




The `echo: false` option disables the printing of code (only output is displayed).
