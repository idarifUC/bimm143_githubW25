---
title: "lab9.0"
format: pdf
editor: visual
---

## lab 9


```{r}

candy <- read.csv("candy-data.txt", row.names=1)
head(candy)
```


> Q1

```{r}
nrow(candy)
```
> Q2

```{r}
sum(candy$fruity)
```

> Q3

```{r}
candy["Snickers", "winpercent"]
```

```{r}
candy["Snickers",]$winpercent
```
> Q4 

```{r}
candy["Kit Kat",]$winpercent
```


> Q5

```{r}
candy["Tootsie Roll Snack Bars",]$winpercent
```

quick over view with skimr

```{r}
library("skimr")
skim(candy)
```


it looks like the `winpercent` column is on a different scale than the others (0-100%rather than 0-1) we will need to scale this dataset before analysis like PCA



> Q6

it looks like the `winpercent` column is on a different scale than the others (0-100%rather than 0-1) we will need to scale this dataset before analysis like PCA

```{r}

```



> Q7

0 represents false/not part of that catagory and 1 vis versa

```{r}

```


> Q8 

```{r}
hist(candy$winpercent)
```

```{r}
library(ggplot2)

ggplot(candy) +
  aes(winpercent) +
  geom_histogram(bins = 10, fill = "lightblue")
```


> Q 10


```{r}
summary(candy$winpercent)

```

> Q11 


- step 1: find all "chocolate" candy

- step 2: find all their "winpercent" values

- step 3: summerize these values

- step 4: find all "fruity" candy

- step 5: find all their "winpercent" values

- step 6: summerize these values

- step 7: compare the two summary values

1. find all chocolate candy 

```{r}
choc.inds <- candy$chocolate == 1

```
2. find their winpercent values
```{r}
choc.win <- candy[choc.inds,] $winpercent
```
3. summerize these values

```{r}
choc.mean <- mean(choc.win)
```

do the same thing with fruity

1. find all chocolate candy 

```{r}
fruit.inds <- candy$fruity == 1

```
2. find their winpercent values
```{r}
fruit.win <- candy[fruit.inds,] $winpercent
```
3. summerize these values

```{r}
fruit.mean <- mean(fruit.win)
```

so clearly chocolate has a higher mean winpercent thna fruity candy 
```{r}
choc.mean
fruit.mean
```

> Q12

```{r}
t.test(choc.win, fruit.win)
```


> Q13


```{r}
# not that useful just sorts values
sort(candy$winpercent)
```

```{r}
x <- c(10,1,100)
order(x)
```

```{r}
x[ order(x)]
```


the `order()` function tells us how it arrange the elements of the input to make them sorted i e ow to order them


we can determine the order of winpercent to make them sorted and use that order to arrange the whole dataset
```{r}
ord.inds <- order(candy$winpercent, decreasing = T)
head( candy[ord.inds,])

```

> Q14

```{r}
head( candy[ord.inds,])

```

> Q15/16

```{r}
ggplot(candy) +
  aes(winpercent, reorder(rownames(candy), winpercent)) + 
  geom_col()
```


### time to add color


we need to make our own seperate color vector where we can spell out exactly what candy id colored
```{r}
mycols <- rep("gray", nrow(candy))
mycols[candy$chocolate == 1] <- "chocolate"
mycols[candy$bar == 1] <- "brown"
mycols[candy$fruity == 1] <- "blue"
mycols
```

```{r}
ggplot(candy) +
  aes(winpercent, reorder(rownames(candy), winpercent)) + 
  geom_col(fill=mycols)
```


## make a plot of winpercent x-axis vs priceprecent y axis

```{r}
library(ggrepel)
```

```{r}
ggplot(candy) + 
  aes(winpercent, pricepercent, label=rownames(candy)) +
  geom_point(col=mycols) +
  geom_text_repel(max.overlaps = 6) +
  theme_bw()
```
to avoid the pverplotting of the text labels we cna use the add on package **ggrepel**

> Q19


> Q20


```{r}
ord <- order(candy$pricepercent, decreasing = TRUE)
head( candy[ord,c(11,12)], n=5 )

```





## 5

```{r}
library(corrplot)
cij <- cor(candy)
corrplot(cij)
```


##6


```{r}
pca <- prcomp(candy, scale=TRUE)
summary(pca)
```


```{r}
attributes(pca)
```
lets plot results

```{r}
pca$x
ggplot(pca$x) + 
  aes(x=PC1, y=PC2, label=rownames(pca$x)) +
  geom_point(col=mycols) +
  geom_text_repel(col=mycols)


```


```{r}
ggplot(pca$rotation) +
  aes(PC1, reorder(rownames(pca$rotation), PC1)) +
  geom_col()
```


> Q24

fruity
